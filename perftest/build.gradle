plugins {
	id 'java'
	id 'com.eriwen.gradle.js' version '2.14.1'
	id 'com.eriwen.gradle.css' version '2.14.0'
}

archivesBaseName = rootProject.name + '-perftest'

dependencies {
    compile project(':common')
    compile project(':perftest-parser')
	compile 'org.json:json:20150729'
	compile 'org.apache.commons:commons-csv:1.3'
    compile 'commons-io:commons-io:2.4'
}

jar {
    doFirst{
        manifest {
            attributes 'Class-Path' : configurations.runtime.collect { it.getName() }.join(' ')
        }
    }
}

combineJs {
	encoding = "UTF-8"
	source = file("src/main/res/report_templates/perf-baseline/html/js.list").text.split('\n').collect {
		"src/main/res/report_templates/perf-baseline/html/$it"
	}
	//source = javascript.source.dev.js.files
	dest = file("${buildDir}/js/all.js")
}

minifyJs {
	source = combineJs
	dest = file("${buildDir}/js/all-min.js")
	sourceMap = file("${buildDir}/js/all.sourcemap.json")
	closure {
		warningLevel = 'QUIET'
	}
}

combineCss {
	source = file("src/main/res/report_templates/perf-baseline/html/css.list").text.split('\n').collect {
		"src/main/res/report_templates/perf-baseline/html/$it"
	}
	dest = "${buildDir}/css/all.css"
}

minifyCss {
	source = combineCss
	dest = "${buildDir}/css/all-min.css"
	yuicompressor { // Optional
		lineBreakPos = -1
	}
}

task createMonoReportTemplate() {
	def html = file("$buildDir/res/report_templates/perf-baseline/html")
	outputs.dir html
	doLast {
		html.mkdirs()
		def f = new File(html, 'report-mono.template.html')
		// write HTML header
		f.write("""<!DOCTYPE html>
<html lang="en">
<head>\n""")
		def sourceDir = 'src/main/res/report_templates/perf-baseline/html'
		// import head partial
		f << file("$sourceDir/partial/head.html").text << '\n'
		// import CSS files
		f << '<style type="text/css">' << '\n'
		f << minifyCss.dest.text << '\n'
		f << '</style>\n</head>\n<body>\n'
		// import body partial
		f << file("$sourceDir/partial/body.html").text << '\n'
		// import JS files
		f << '<script type="text/javascript">\n'
		f << minifyJs.dest.text << '\n'
		f << '</script>\n'
		f << '</body>\n</html>\n'
	}
}
createMonoReportTemplate.dependsOn(minifyJs)
createMonoReportTemplate.dependsOn(minifyCss)

apply plugin: 'distribution'

distributions {
    main {
        contents {
            from("src/main/dist/bin"){
                into('bin')
            }
            from (configurations.runtime){
                into('lib')
            }
            from (jar){
                into('lib')
            }
			from(createMonoReportTemplate) {
				into 'res/report-templates/perf/html'
			}
        }
    }
}



apply plugin: 'maven-publish'

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = archivesBaseName
			from components.java
			artifact sourcesJar
			artifact javadocJar
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = archivesBaseName
				description = 'Perfcharts is a free software written in Java, which reads performance testing and system monitoring results from Jmeter, NMON, and/or other applications to produce charts for further analysis.'
				url = 'https://github.com/vfreex/perfcharts'

				licenses {
					license {
						name = 'GNU AFFERO GENERAL PUBLIC LICENSE, Version 3'
						url = 'http://www.gnu.org/licenses/agpl.txt'
					}
				}
				developers {
					developer {
						id = 'vfreex'
						name = 'Yuxiang Zhu'
						email = 'vfreex@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/vfreex/perfcharts.git'
					developerConnection = 'scm:git:ssh://github.com/vfreex/perfcharts.git'
					url = 'github.com/vfreex/perfcharts'
				}
			}
		}
	}
	repositories {
		maven {
			// change URLs to point to your repos, e.g. http://my.org/repo
			def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username ossrhUsername
				password ossrhPassword
			}
		}
	}
}

// Signing
apply plugin: 'signing'
signing {
	useGpgCmd()
	sign publishing.publications.mavenJava
}


apply plugin: 'application'

application {
	applicationName = "perfcharts"
	mainClassName = 'perfcharts.launcher.NewGeneratorLauncher'
}
