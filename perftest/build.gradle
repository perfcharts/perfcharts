apply plugin: 'java'

archivesBaseName = rootProject.name + '-perftest'

dependencies {
    compile project(':common')
    compile project(':perftest-parser')
	compile 'org.json:json:20150729'
	compile 'org.apache.commons:commons-csv:1.3'
    compile 'commons-io:commons-io:2.4'
}

jar {
    doFirst{
        manifest {
            attributes 'Class-Path' : configurations.runtime.collect { it.getName() }.join(' ')
        }
    }
}

task buildMonoReportTemplate(type: Exec) {
	commandLine 'bash', '-e', 'tools/generate_mono_report_template.sh'
	doFirst {
        file("$buildDir/dynamicAssets/res").mkdirs()
		standardOutput = new FileOutputStream(file("$buildDir/dynamicAssets/res/report-mono.template.html"))
	}
}

task buildReportTemplate(type: Exec) {
	commandLine 'bash', '-e', 'tools/generate_mono_report_template.sh'
	doFirst {
        file("$buildDir/dynamicAssets/res").mkdirs()
		standardOutput = new FileOutputStream(file("$buildDir/dynamicAssets/res/report.template.html"))
	}
}

task runBuildSh(type: Exec) {
	commandLine 'bash', '-e', 'build.sh'
}

// assemble.dependsOn buildReportTemplate, buildMonoReportTemplate
assemble.dependsOn runBuildSh

//apply plugin: 'distribution'
//
//distributions {
//    main {
//        contents {
////            from("src/main/dist/bin"){
////                into('bin')
////            }
//            from("src/main/dist/res"){
//                into('res')
//            }
//            from (configurations.runtime){
//                into('lib')
//            }
//            from (jar){
//                into('lib')
//            }
//        }
//    }
//}



apply plugin: 'maven-publish'

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = archivesBaseName
			from components.java
			artifact sourcesJar
			artifact javadocJar
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = archivesBaseName
				description = 'Perfcharts is a free software written in Java, which reads performance testing and system monitoring results from Jmeter, NMON, and/or other applications to produce charts for further analysis.'
				url = 'https://github.com/vfreex/perfcharts'

				licenses {
					license {
						name = 'GNU AFFERO GENERAL PUBLIC LICENSE, Version 3'
						url = 'http://www.gnu.org/licenses/agpl.txt'
					}
				}
				developers {
					developer {
						id = 'vfreex'
						name = 'Yuxiang Zhu'
						email = 'vfreex@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/vfreex/perfcharts.git'
					developerConnection = 'scm:git:ssh://github.com/vfreex/perfcharts.git'
					url = 'github.com/vfreex/perfcharts'
				}
			}
		}
	}
	repositories {
		maven {
			// change URLs to point to your repos, e.g. http://my.org/repo
			def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username ossrhUsername
				password ossrhPassword
			}
		}
	}
}

// Signing
apply plugin: 'signing'
signing {
	useGpgCmd()
	sign publishing.publications.mavenJava
}